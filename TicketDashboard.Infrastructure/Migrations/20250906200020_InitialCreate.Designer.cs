// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketDashboard.Infrastructure.Data;

#nullable disable

namespace TicketDashboard.Infrastructure.Migrations
{
    [DbContext(typeof(TicketDbContext))]
    [Migration("20250906200020_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketDashboard.Domain.Entities.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Agents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 12, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7489),
                            Email = "john.doe@company.com",
                            IsActive = true,
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 17, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7492),
                            Email = "jane.smith@company.com",
                            IsActive = true,
                            Name = "Jane Smith"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 22, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7494),
                            Email = "bob.johnson@company.com",
                            IsActive = true,
                            Name = "Bob Johnson"
                        });
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.ServiceLevelAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ResolutionTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ResponseTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceLevelAgreements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 7, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7601),
                            Description = "Service Level Agreement for Critical priority tickets",
                            IsActive = true,
                            Name = "Critical Priority SLA",
                            Priority = 3,
                            ResolutionTime = new TimeSpan(0, 4, 0, 0, 0),
                            ResponseTime = new TimeSpan(0, 1, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 7, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7604),
                            Description = "Service Level Agreement for High priority tickets",
                            IsActive = true,
                            Name = "High Priority SLA",
                            Priority = 2,
                            ResolutionTime = new TimeSpan(1, 0, 0, 0, 0),
                            ResponseTime = new TimeSpan(0, 4, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 7, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7608),
                            Description = "Service Level Agreement for Medium priority tickets",
                            IsActive = true,
                            Name = "Medium Priority SLA",
                            Priority = 1,
                            ResolutionTime = new TimeSpan(3, 0, 0, 0, 0),
                            ResponseTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 7, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7611),
                            Description = "Service Level Agreement for Low priority tickets",
                            IsActive = true,
                            Name = "Low Priority SLA",
                            Priority = 0,
                            ResolutionTime = new TimeSpan(7, 0, 0, 0, 0),
                            ResponseTime = new TimeSpan(1, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.SlaViolation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ActualTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SlaId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ViolationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViolationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SlaId");

                    b.HasIndex("TicketId");

                    b.ToTable("SlaViolations");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("FirstResponseAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("SlaId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SlaId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedToId = 2,
                            CreatedAt = new DateTime(2025, 8, 8, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7501),
                            CreatedById = 2,
                            CustomerEmail = "customer1@example.com",
                            Description = "User cannot log into the system",
                            Priority = 2,
                            Status = 0,
                            Title = "Login Issue"
                        },
                        new
                        {
                            Id = 2,
                            AssignedToId = 3,
                            CreatedAt = new DateTime(2025, 8, 9, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7501),
                            CreatedById = 2,
                            CustomerEmail = "customer2@example.com",
                            Description = "Add dark mode support to the application",
                            Priority = 1,
                            Status = 1,
                            Title = "Feature Request: Dark Mode"
                        },
                        new
                        {
                            Id = 3,
                            AssignedToId = 1,
                            ClosedAt = new DateTime(2025, 8, 12, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7501),
                            CreatedAt = new DateTime(2025, 8, 10, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7501),
                            CreatedById = 3,
                            CustomerEmail = "customer3@example.com",
                            Description = "Monthly reports are not generating properly",
                            Priority = 3,
                            Status = 2,
                            Title = "Bug: Report Generation Fails",
                            UpdatedAt = new DateTime(2025, 8, 12, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7501)
                        });
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.TicketComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            Content = "I've started investigating this issue. Will update soon.",
                            CreatedAt = new DateTime(2025, 8, 8, 22, 0, 19, 298, DateTimeKind.Utc).AddTicks(7501),
                            IsInternal = false,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 3,
                            Content = "Working on the dark mode implementation. Should be ready for testing next week.",
                            CreatedAt = new DateTime(2025, 8, 10, 0, 0, 19, 298, DateTimeKind.Utc).AddTicks(7501),
                            IsInternal = true,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            Content = "Fixed the report generation issue. The problem was with the date filtering logic.",
                            CreatedAt = new DateTime(2025, 8, 12, 21, 0, 19, 298, DateTimeKind.Utc).AddTicks(7501),
                            IsInternal = false,
                            TicketId = 3
                        });
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.TicketRoutingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoutingRuleId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoutingRuleId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketRoutingLogs");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.TicketRoutingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddTags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AssignToDepartment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("AssignToUserId")
                        .HasColumnType("int");

                    b.Property<string>("ConditionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("SetPriority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignToUserId");

                    b.ToTable("TicketRoutingRules");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 7, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7223),
                            Email = "admin@company.com",
                            FirstName = "System",
                            IsActive = true,
                            LastName = "Administrator",
                            PasswordHash = "AQAAAAIAAYagAAAAEGwGGCBvPtT4WF3U7v7uD7ixqf7fy8yHQP7Q9tP3QJ7VJ7qJ7yQ7Z7",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 12, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7232),
                            Email = "john.doe@company.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            PasswordHash = "AQAAAAIAAYagAAAAEGwGGCBvPtT4WF3U7v7uD7ixqf7fy8yHQP7Q9tP3QJ7VJ7qJ7yQ7Z7",
                            Role = "Agent",
                            Username = "john.doe"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 17, 20, 0, 19, 298, DateTimeKind.Utc).AddTicks(7236),
                            Email = "jane.smith@company.com",
                            FirstName = "Jane",
                            IsActive = true,
                            LastName = "Smith",
                            PasswordHash = "AQAAAAIAAYagAAAAEGwGGCBvPtT4WF3U7v7uD7ixqf7fy8yHQP7Q9tP3QJ7VJ7qJ7yQ7Z7",
                            Role = "Agent",
                            Username = "jane.smith"
                        });
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.SlaViolation", b =>
                {
                    b.HasOne("TicketDashboard.Domain.Entities.ServiceLevelAgreement", "Sla")
                        .WithMany("Violations")
                        .HasForeignKey("SlaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketDashboard.Domain.Entities.Ticket", "Ticket")
                        .WithMany("SlaViolations")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sla");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("TicketDashboard.Domain.Entities.Agent", null)
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AgentId");

                    b.HasOne("TicketDashboard.Domain.Entities.User", "AssignedTo")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TicketDashboard.Domain.Entities.User", "CreatedBy")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketDashboard.Domain.Entities.ServiceLevelAgreement", "Sla")
                        .WithMany()
                        .HasForeignKey("SlaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedTo");

                    b.Navigation("CreatedBy");

                    b.Navigation("Sla");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.TicketComment", b =>
                {
                    b.HasOne("TicketDashboard.Domain.Entities.Agent", null)
                        .WithMany("Comments")
                        .HasForeignKey("AgentId");

                    b.HasOne("TicketDashboard.Domain.Entities.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketDashboard.Domain.Entities.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.TicketRoutingLog", b =>
                {
                    b.HasOne("TicketDashboard.Domain.Entities.TicketRoutingRule", "RoutingRule")
                        .WithMany("RoutingLogs")
                        .HasForeignKey("RoutingRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketDashboard.Domain.Entities.Ticket", "Ticket")
                        .WithMany("RoutingLogs")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoutingRule");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.TicketRoutingRule", b =>
                {
                    b.HasOne("TicketDashboard.Domain.Entities.User", "AssignToUser")
                        .WithMany()
                        .HasForeignKey("AssignToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignToUser");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.Agent", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.ServiceLevelAgreement", b =>
                {
                    b.Navigation("Violations");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("RoutingLogs");

                    b.Navigation("SlaViolations");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.TicketRoutingRule", b =>
                {
                    b.Navigation("RoutingLogs");
                });

            modelBuilder.Entity("TicketDashboard.Domain.Entities.User", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("Comments");

                    b.Navigation("CreatedTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
